{
  "Focus": "**Focus** - Startet ein HypnoScript-Programm.\n\n**Beispiel:**\n```hyp\nFocus {\n    // Programmcode\n} Relax\n```\n\n**Beschreibung:** Mit `Focus` wird ein Programm initialisiert. Der gesamte Code zwischen `Focus` und `Relax` wird sequentiell ausgeführt – inklusive Fehlerbehandlung und Logging für unternehmensspezifische Einsatzszenarien.",
  "Relax": "**Relax** - Beendet ein HypnoScript-Programm.\n\n**Beispiel:**\n```hyp\nFocus {\n    // Code\n} Relax\n```\n\n**Beschreibung:** Schließt das aktive HypnoScript-Programm und sorgt dafür, dass offene Ressourcen ordnungsgemäß freigegeben und Log-Daten finalisiert werden.",
  "induce": "**induce** - Deklariert eine Variable.\n\n**Beispiel:**\n```hyp\ninduce counter: number = 10;\n```\n\n**Beschreibung:** Verwende `induce` zur Deklaration einer stark typisierten Variable. Unterstützt Inline-Initialisierung sowie externe Eingabewerte.",
  "suggestion": "**suggestion** - Definiert eine Funktion.\n\n**Beispiel:**\n```hyp\nsuggestion add(a: number, b: number): number {\n    awaken a + b;\n}\n```\n\n**Beschreibung:** Definiert eine Funktion mit vollständigen Typannotationen. Mit `awaken` wird der Rückgabewert spezifiziert, was zu einer klaren Trennung von Deklaration und Ausführung führt.",
  "observe": "**observe** - Gibt einen Wert oder Ausdruck aus.\n\n**Beispiel:**\n```hyp\nobserve \"Hallo, HypnoScript!\";\n```\n\n**Beschreibung:** Schreibt den angegebenen Wert in das zentrale Log- oder UI-System. Unterstützt auch String-Interpolation und die Auswertung von Ausdrücken.",
  "trance": "**trance** - Spezieller Datentyp.\n\n**Beispiel:**\n```hyp\ninduce zustand: trance = wert;\n```\n\n**Beschreibung:** Ein eigens definierter Typ, der beispielsweise für sichere Daten oder experimentelle Features verwendet wird.",
  "drift": "**drift(ms)** - Verzögert die Ausführung um die angegebene Zeit.\n\n**Beispiel:**\n```hyp\ndrift(1000); // wartet 1 Sekunde\n```\n\n**Beschreibung:** Fügt eine kontrollierte Verzögerung ein. Dies ist nützlich zur Synchronisierung asynchroner Prozesse oder für zeitgesteuerte Abläufe.",
  "session": "**session** - Erstellt eine objektorientierte Session.\n\n**Beispiel:**\n```hyp\nsession Person {\n    expose name: string;\n\n    suggestion constructor(neuerName: string) {\n        this.name = neuerName;\n    }\n\n    suggestion gruß() {\n        observe \"Hallo \" + this.name;\n    }\n}\n```\n\n**Beschreibung:** Definiert eine Session (vergleichbar mit einer Klasse) mit öffentlichen (`expose`) und privaten (`conceal`) Elementen. Unterstützt Kapselung und modulare Architektur in groß angelegten Anwendungen.",
  "expose": "**expose** - Markiert eine Eigenschaft als öffentlich.\n\n**Beispiel:**\n```hyp\nsession Daten {\n    expose wert: number;\n}\n```\n\n**Beschreibung:** Erlaubt den Zugriff auf die deklarierte Eigenschaft von außen, wobei gleichzeitig unternehmensweite Zugriffsrichtlinien berücksichtigt werden.",
  "conceal": "**conceal** - Markiert eine Eigenschaft als privat.\n\n**Beispiel:**\n```hyp\nsession Daten {\n    conceal geheimnis: string;\n}\n```\n\n**Beschreibung:** Sorgt dafür, dass die Eigenschaft vor externem Zugriff geschützt ist. Dies unterstützt Sicherheits- und Datenschutzanforderungen.",
  "entrance": "**entrance** - Definiert den initial auszuführenden Block.\n\n**Beispiel:**\n```hyp\nFocus {\n    entrance {\n        observe \"Initialisierung...\";\n    }\n    // weiterer Code\n} Relax\n```\n\n**Beschreibung:** Der Code im `entrance`-Block wird vor allem anderen ausgeführt – ideal zur Initialisierung von Ressourcen und Setzen des Ausführungs-Kontexts.",
  "deepFocus": "**deepFocus** - Alternative Syntax für Codeblöcke.\n\n**Beispiel:**\n```hyp\nif (counter > 5) deepFocus {\n    observe \"Counter ist größer als 5\";\n}\n```\n\n**Beschreibung:** Bietet eine alternative Schreibweise zu herkömmlichen Blockklammern und verbessert die Lesbarkeit komplexer, verschachtelter Strukturen.",
  "call": "**call** - Ruft eine Funktion auf.\n\n**Beispiel:**\n```hyp\ncall add(5, 10);\n```\n\n**Beschreibung:** Erzwingt den Funktionsaufruf mit erweitertem Error-Handling und Logging. Besonders nützlich, wenn Funktionsbindungen dynamisch erfolgen.",
  "from_external": "**from external** - Definiert eine externe Eingabequelle.\n\n**Beispiel:**\n```hyp\ninduce eingabe: number from external;\n```\n\n**Beschreibung:** Spezifiziert, dass der Initialwert der Variablen über eine externe Quelle (etwa Benutzereingabe oder einen Daten-Feed) bezogen wird.",
  "if": "**if** - Bedingungsblock.\n\n**Beispiel:**\n```hyp\nif (Bedingung) {\n    // auszuführender Code, wenn Bedingung wahr ist\n} else {\n    // alternativer Code, wenn Bedingung falsch ist\n}\n```\n\n**Beschreibung:** Prüft eine Bedingung und führt den enthaltenen Codeblock aus, wenn diese wahr ist. Ein optionaler `else`-Block ermöglicht alternative Abläufe.",
  "else": "**else** - Alternative Verzweigung in einer Bedingung.\n\n**Beispiel:**\n```hyp\nif (Bedingung) {\n    // Code wenn wahr\n} else {\n    // Code wenn falsch\n}\n```\n\n**Beschreibung:** Wird ausgeführt, wenn die Bedingung im zugehörigen `if`-Block nicht erfüllt ist und stellt so einen alternativen Programmablauf sicher.",
  "while": "**while** - Schleifenstruktur.\n\n**Beispiel:**\n```hyp\nwhile (Bedingung) {\n    // Code, der wiederholt wird, solange die Bedingung wahr ist\n}\n```\n\n**Beschreibung:** Führt einen Codeblock so lange wiederholt aus, wie die angegebene Bedingung erfüllt ist.",
  "error_no_focus": "Programm muss mit 'Focus' beginnen.",
  "error_no_relax": "Programm muss mit 'Relax' enden.",
  "extension_activation": "HypnoScript Erweiterung aktiviert.",
  "comp_focus": "Startet ein HypnoScript-Programm",
  "comp_relax": "Beendet ein HypnoScript-Programm",
  "comp_induce": "Deklariert eine Variable",
  "comp_suggestion": "Definiert eine Funktion",
  "comp_session": "**session** - Erstellt eine OOP-Session.",
  "comp_tranceify": "**tranceify** - Erstellt eine benutzerdefinierte Struktur.",
  "comp_entrance": "**entrance** - Definiert den Startblock, der zuerst ausgeführt wird.",
  "comp_deepfocus": "**deepFocus** - Alternative Syntax für Codeblöcke.",
  "no_diagnostics": "Keine Diagnosen verfügbar.",
  "error_in_diagnostic_request": "Fehler in Diagnostic Request: "
}
