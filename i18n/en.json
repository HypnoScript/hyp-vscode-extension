{
  "Focus": "**Focus** - Starts a HypnoScript program.\n\n**Usage Example:**\n```hyp\nFocus {\n    // Your program code\n} Relax\n```\n\n**Description:** Use `Focus` to initiate a program. All code between `Focus` and `Relax` is executed sequentially with built-in error handling and logging.",
  "Relax": "**Relax** - Ends a HypnoScript program.\n\n**Usage Example:**\n```hyp\nFocus {\n    // Your code\n} Relax\n```\n\n**Description:** Closes the active HypnoScript program. This ensures that any open resources are finalized.",
  "induce": "**induce** - Declares a variable.\n\n**Usage Example:**\n```hyp\ninduce counter: number = 10;\n```\n\n**Description:** Use `induce` to declare a strongly-typed variable. Supports inline initialization and external input.",
  "suggestion": "**suggestion** - Defines a function.\n\n**Usage Example:**\n```hyp\nsuggestion add(a: number, b: number): number {\n    awaken a + b;\n}\n```\n\n**Description:** Defines a function with type annotations. The `awaken` keyword is used for returning values, providing clear separation between declaration and execution.",
  "observe": "**observe** - Outputs a value or an expression.\n\n**Usage Example:**\n```hyp\nobserve \"Hello, HypnoScript!\";\n```\n\n**Description:** Sends output to the designated logging or UI system. It supports string interpolation and expression evaluation.",
  "trance": "**trance** - Special data type.\n\n**Usage Example:**\n```hyp\ninduce state: trance = someValue;\n```\n\n**Description:** A bespoke type that may be used for secure or experimental data handling in HypnoScript.",
  "drift": "**drift(ms)** - Delays execution for a given time.\n\n**Usage Example:**\n```hyp\ndrift(1000); // pause for 1 second\n```\n\n**Description:** Inserts a controlled delay. Useful for synchronizing asynchronous operations or creating timed effects in the program.",
  "session": "**session** - Creates an object-oriented session.\n\n**Usage Example:**\n```hyp\nsession Person {\n    expose name: string;\n\n    suggestion constructor(newName: string) {\n        this.name = newName;\n    }\n\n    suggestion greet() {\n        observe \"Hello \" + this.name;\n    }\n}\n```\n\n**Description:** Defines a session (similar to a class) with public (`expose`) and private (`conceal`) members. Supports encapsulation and modular design in enterprise-grade applications.",
  "expose": "**expose** - Marks a property as public.\n\n**Usage Example:**\n```hyp\nsession Data {\n    expose value: number;\n}\n```\n\n**Description:** Declares that the property is available outside the session, promoting controlled data sharing.",
  "conceal": "**conceal** - Marks a property as private.\n\n**Usage Example:**\n```hyp\nsession Data {\n    conceal secret: string;\n}\n```\n\n**Description:** Ensures that the property remains inaccessible from the outside, protecting sensitive information.",
  "entrance": "**entrance** - Defines the initial execution block.\n\n**Usage Example:**\n```hyp\nFocus {\n    entrance {\n        observe \"Initialization...\";\n    }\n    // other code\n} Relax\n```\n\n**Description:** When present, the code in an `entrance` block is executed first. Use it to set up your environment or initialize resources.",
  "deepFocus": "**deepFocus** - Alternative block syntax for code grouping.\n\n**Usage Example:**\n```hyp\nif (counter > 5) deepFocus {\n    observe \"Counter is greater than 5\";\n}\n```\n\n**Description:** Offers an alternative to standard curly braces, enhancing readability for complex nested structures.",
  "call": "**call** - Invokes a function.\n\n**Usage Example:**\n```hyp\ncall add(5, 10);\n```\n\n**Description:** Explicitly calls a previously defined function. Beneficial in contexts where function binding might be ambiguous.",
  "from_external": "**from external** - Specifies external input source.\n\n**Usage Example:**\n```hyp\ninduce inputValue: number from external;\n```\n\n**Description:** Indicates that the variableâ€™s initial value should be retrieved from an external data source or user input.",
  "error_no_focus": "Program must start with 'Focus'.",
  "error_no_relax": "Program must end with 'Relax'.",
  "extension_activation": "HypnoScript extension activated.",
  "comp_focus": "Starts a HypnoScript program",
  "comp_relax": "Ends a HypnoScript program",
  "comp_induce": "Declares a variable",
  "comp_suggestion": "Defines a function",
  "comp_session": "**session** - Creates an OOP session.",
  "comp_tranceify": "**tranceify** - Creates a custom structure.",
  "comp_entrance": "**entrance** - Declares the start block, executed first.",
  "comp_deepfocus": "**deepFocus** - Alternative block syntax.",
  "no_diagnostics": "No diagnostics available.",
  "error_in_diagnostic_request": "Error in Diagnostic Request: ",
  "if": "**if** - Conditional Block.\n\n**Usage Example:**\n```hyp\nif (condition) {\n    // code to execute if condition is true\n} else {\n    // code to execute otherwise\n}\n```\n\n**Description:** Evaluates a condition and executes the associated code block if the condition is true. An optional `else` block may define an alternative execution path.",
  "else": "**else** - Alternative Branch in a Conditional.\n\n**Usage Example:**\n```hyp\nif (condition) {\n    // code if true\n} else {\n    // code if false\n}\n```\n\n**Description:** Provides an alternative code block that will execute if the condition in the corresponding `if` statement is false.",
  "while": "**while** - Loop Structure.\n\n**Usage Example:**\n```hyp\nwhile (condition) {\n    // code to repeat while condition remains true\n}\n```\n\n**Description:** Repeatedly executes the enclosed code block as long as the evaluated condition is true.",
  "error_unbalanced_braces": "Syntax error: Unbalanced braces detected. Please check your '{' and '}'.",
  "error_missing_semicolon": "Syntax warning: Possibly missing semicolon at the end of the statement.",
  "diagnostic_error_popup": "Syntax errors detected. Would you like to view suggested solutions?",
  "diagnostic_solution_message": "Suggestion: Check that 'Focus' and 'Relax' are correctly used and all blocks are properly closed.",
  "diagnostic_solution_button": "Show solution"
}
